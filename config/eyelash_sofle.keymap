#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        left_ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <30 29>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        left_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <30 28>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        left_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <30 27>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        left_ctrl+shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <30 29 28>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        left_ctrl+alt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <30 29 27>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        left_shift+alt {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <30 27 28>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        right_ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <34 35>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        right_shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <34 36>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        right_alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <34 37>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        right_ctrl+shift {
            bindings = <&kp RC(RIGHT_SHIFT)>;
            key-positions = <34 35 36>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        right_ctrl+alt {
            bindings = <&kp RC(RIGHT_ALT)>;
            key-positions = <34 35 37>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };

        right_shift+alt {
            bindings = <&kp RS(RIGHT_ALT)>;
            key-positions = <34 37 36>;
            require-prior-idle-ms = <120>;
            layers = <0>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESCAPE      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5       &kp C_BRIGHTNESS_INC  &kp NUMBER_6     &kp NUMBER_7  &kp NUMBER_8   &kp NUMBER_9  &kp NUMBER_0   &kp BACKSPACE
&kp TAB         &kp Q         &kp W         &kp E         &kp R         &kp T              &kp C_BRIGHTNESS_DEC  &kp Y            &kp U         &kp I          &kp O         &kp P          &kp LEFT_BRACKET
&kp LEFT_SHIFT  &kp A         &kp S         &kp D         &kp F         &kp G              &none                 &kp H            &kp J         &kp K          &kp L         &kp SEMICOLON  &kp SINGLE_QUOTE
&none           &kp Z         &kp X         &kp C         &kp V         &kp B              &none                 &kp N            &kp M         &kp COMMA      &kp PERIOD    &kp SLASH      &kp RIGHT_BRACKET
&kp K_MUTE      &none         &none         &kp LEFT_GUI  &mo 1         &mt LCTRL SPACE    &none                 &mt RCTRL ENTER  &mo 2         &kp RIGHT_GUI  &none         &none
            >;

            label = "BASE";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        SYM {
            bindings = <
&none  &kp RA(NUMBER_1)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(NUMBER_4)  &kp RA(NUMBER_5)    &none  &kp RA(NUMBER_6)  &kp RA(NUMBER_7)  &kp RA(NUMBER_8)  &kp RA(NUMBER_9)  &kp RA(NUMBER_0)   &none
&none  &kp RA(Q)         &kp RA(W)         &kp RA(E)         &kp RA(R)         &kp RA(T)           &none  &kp RA(Y)         &kp RA(U)         &kp RA(I)         &kp RA(O)         &kp RA(P)          &kp RA(LEFT_BRACKET)
&none  &kp RA(A)         &kp RA(S)         &kp RA(D)         &kp RA(F)         &kp RA(G)           &none  &kp RA(H)         &kp RA(J)         &kp RA(K)         &kp RA(L)         &kp RA(SEMICOLON)  &kp RA(SINGLE_QUOTE)
&mo 3  &kp RA(Z)         &kp RA(X)         &kp RA(C)         &kp RA(V)         &kp RA(B)           &none  &kp RA(N)         &kp RA(M)         &kp RA(COMMA)     &kp RA(DOT)       &kp RA(SLASH)      &kp RA(RIGHT_BRACKET)
&none  &none             &none             &none             &none             &none               &none  &none             &none             &none             &none             &none
            >;

            label = "SYM";
        };

        NAV {
            bindings = <
&none  &none  &none              &none              &none             &none    &none  &none          &none      &none   &none      &none     &kp DELETE
&none  &none  &none              &mmv MOVE_Y(-400)  &none             &none    &none  &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &kp HOME  &none
&none  &none  &mmv MOVE_X(-400)  &mmv MOVE_Y(400)   &mmv MOVE_X(400)  &none    &none  &kp LEFT       &kp DOWN   &kp UP  &kp RIGHT  &none     &none
&none  &none  &none              &none              &none             &none    &none  &kp PAGE_DOWN  &none      &none   &none      &kp END   &none
&none  &none  &none              &none              &none             &none    &none  &none          &none      &none   &none      &none
            >;

            label = "NAV";
        };

        FUNC {
            bindings = <
&none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &none  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&none  &none   &none   &none   &none   &none     &none  &none   &none   &none   &none   &none    &kp F12
&none  &none   &none   &none   &none   &none     &none  &none   &none   &none   &none   &none    &none
&none  &none   &none   &none   &none   &none     &none  &none   &none   &none   &none   &none    &none
&none  &none   &none   &none   &none   &none     &none  &none   &none   &none   &none   &none
            >;

            label = "FUNC";
        };
    };
};
